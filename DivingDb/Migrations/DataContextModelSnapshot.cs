// <auto-generated />
using System;
using DivingDb.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DivingDb.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DivingDb.Model.DeepGroup", b =>
                {
                    b.Property<int>("DeepGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeepGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DeepGroupId");

                    b.ToTable("DeepGroups");
                });

            modelBuilder.Entity("DivingDb.Model.DeepTable", b =>
                {
                    b.Property<int>("DeepTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeepTableId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DeepTableId");

                    b.ToTable("DeepTables");
                });

            modelBuilder.Entity("DivingDb.Model.DiveTypePermission", b =>
                {
                    b.Property<int>("DiveTypePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DiveTypePermissionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DiveTypePermissionId");

                    b.ToTable("DiveTypePermissions");
                });

            modelBuilder.Entity("DivingDb.Model.Diver", b =>
                {
                    b.Property<int>("DiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DiverId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnName("Identifier")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DiverId");

                    b.ToTable("Divers");
                });

            modelBuilder.Entity("DivingDb.Model.DivingActivity", b =>
                {
                    b.Property<int>("DivingActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingActivityId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeepGroupId")
                        .HasColumnName("DeepGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DeepTableId")
                        .HasColumnName("DeepTableId")
                        .HasColumnType("int");

                    b.Property<int>("DiverId")
                        .HasColumnName("DiverId")
                        .HasColumnType("int");

                    b.Property<int>("DivingLaborId")
                        .HasColumnName("DivingLaborId")
                        .HasColumnType("int");

                    b.Property<int>("DivingTimePeriodId")
                        .HasColumnName("DivingTimePeriodId")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnName("EndTime")
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsBackup")
                        .HasColumnName("IsBackup")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColdWater")
                        .HasColumnName("IsColdWater")
                        .HasColumnType("bit");

                    b.Property<double>("MaxDeep")
                        .HasColumnName("MaxDeep")
                        .HasColumnType("float");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnName("StartTime")
                        .HasColumnType("varchar(5)");

                    b.Property<double>("TotalTime")
                        .HasColumnName("TotalTime")
                        .HasColumnType("float");

                    b.HasKey("DivingActivityId");

                    b.HasIndex("DeepGroupId");

                    b.HasIndex("DeepTableId");

                    b.HasIndex("DiverId");

                    b.HasIndex("DivingLaborId");

                    b.HasIndex("DivingTimePeriodId");

                    b.ToTable("DivingActivities");
                });

            modelBuilder.Entity("DivingDb.Model.DivingActivityDetail", b =>
                {
                    b.Property<int>("DivingActivityDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingActivityDetailId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivingActivityId")
                        .HasColumnName("DivingActivityId")
                        .HasColumnType("int");

                    b.Property<int>("DivingTypeSubJobId")
                        .HasColumnName("DivingTypeSubJobId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnName("FileId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnName("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("DivingActivityDetailId");

                    b.HasIndex("DivingActivityId");

                    b.HasIndex("DivingTypeSubJobId");

                    b.ToTable("DivingActivityDetails");
                });

            modelBuilder.Entity("DivingDb.Model.DivingEquipment", b =>
                {
                    b.Property<int>("DivingEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingEquipmentId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivingEquipmentCategoryId")
                        .HasColumnName("DivingEquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DivingLaborId")
                        .HasColumnName("DivingLaborId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnName("DivingActivExpirationTimeityId")
                        .HasColumnType("datetime");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnName("Identifier")
                        .HasColumnType("varchar(60)");

                    b.HasKey("DivingEquipmentId");

                    b.HasIndex("DivingEquipmentCategoryId");

                    b.HasIndex("DivingLaborId");

                    b.ToTable("DivingEquipments");
                });

            modelBuilder.Entity("DivingDb.Model.DivingEquipmentAssignment", b =>
                {
                    b.Property<int>("DivingEquipmentAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiverId")
                        .HasColumnType("int");

                    b.Property<int>("DivingEquipmentId")
                        .HasColumnType("int");

                    b.HasKey("DivingEquipmentAssignmentId");

                    b.HasIndex("DiverId");

                    b.HasIndex("DivingEquipmentId");

                    b.ToTable("DivingEquipmentAssignment");
                });

            modelBuilder.Entity("DivingDb.Model.DivingEquipmentCategory", b =>
                {
                    b.Property<int>("DivingEquipmentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingEquipmentCategory")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DivingEquipmentCategoryId");

                    b.ToTable("DivingEquipmentCategories");
                });

            modelBuilder.Entity("DivingDb.Model.DivingLabor", b =>
                {
                    b.Property<int>("DivingLaborId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingLaborId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentReview")
                        .HasColumnName("CommentReview")
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("Comments")
                        .HasColumnName("Comments")
                        .HasColumnType("nvarchar(700)");

                    b.Property<int?>("DiveTypePermissionId")
                        .HasColumnType("int");

                    b.Property<int>("DivingLaborStatusId")
                        .HasColumnName("DivingLaborStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnName("EventId")
                        .HasColumnType("int");

                    b.Property<double>("Flowing")
                        .HasColumnName("Flowing")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnName("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TypeOfPermisionId")
                        .HasColumnName("TypeOfPermisionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId")
                        .HasColumnType("varchar(450)");

                    b.Property<double>("WaveHeight")
                        .HasColumnName("WaveHeight")
                        .HasColumnType("float");

                    b.Property<double>("WindDirection")
                        .HasColumnName("WindDirection")
                        .HasColumnType("float");

                    b.HasKey("DivingLaborId");

                    b.HasIndex("DiveTypePermissionId");

                    b.HasIndex("DivingLaborStatusId");

                    b.ToTable("DivingLabors");
                });

            modelBuilder.Entity("DivingDb.Model.DivingLaborStatus", b =>
                {
                    b.Property<int>("DivingLaborStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DivingLaborStatusId");

                    b.ToTable("DivingLaborStatus");
                });

            modelBuilder.Entity("DivingDb.Model.DivingTimePeriod", b =>
                {
                    b.Property<int>("DivingTimePeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingTimePeriodId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DivingTimePeriodId");

                    b.ToTable("DivingTimePeriods");
                });

            modelBuilder.Entity("DivingDb.Model.DivingTypeJob", b =>
                {
                    b.Property<int>("DivingTypeJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingTypeJobId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("DivingTypeJobId");

                    b.ToTable("DivingTypeJobs");
                });

            modelBuilder.Entity("DivingDb.Model.DivingTypeSubJob", b =>
                {
                    b.Property<int>("DivingTypeSubJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivingTypeSubJobId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivingTypeJobId")
                        .HasColumnName("DivingTypeJobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("DivingTypeSubJobId");

                    b.HasIndex("DivingTypeJobId");

                    b.ToTable("DivingTypeSubJobs");
                });

            modelBuilder.Entity("DivingDb.Model.DivingActivity", b =>
                {
                    b.HasOne("DivingDb.Model.DeepGroup", "DeepGroup")
                        .WithMany()
                        .HasForeignKey("DeepGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingDb.Model.DeepTable", "DeepTable")
                        .WithMany()
                        .HasForeignKey("DeepTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingDb.Model.Diver", "Diver")
                        .WithMany()
                        .HasForeignKey("DiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingDb.Model.DivingLabor", "DivingLabor")
                        .WithMany("DivingActivities")
                        .HasForeignKey("DivingLaborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingDb.Model.DivingTimePeriod", "DivingTimePeriod")
                        .WithMany()
                        .HasForeignKey("DivingTimePeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DivingDb.Model.DivingActivityDetail", b =>
                {
                    b.HasOne("DivingDb.Model.DivingActivity", "DivingActivity")
                        .WithMany("ActivityDetails")
                        .HasForeignKey("DivingActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingDb.Model.DivingTypeSubJob", "DivingTypeSubJob")
                        .WithMany()
                        .HasForeignKey("DivingTypeSubJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DivingDb.Model.DivingEquipment", b =>
                {
                    b.HasOne("DivingDb.Model.DivingEquipmentCategory", "DivingEquipmentCategory")
                        .WithMany()
                        .HasForeignKey("DivingEquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingDb.Model.DivingLabor", "DivingLabor")
                        .WithMany("Equipments")
                        .HasForeignKey("DivingLaborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DivingDb.Model.DivingEquipmentAssignment", b =>
                {
                    b.HasOne("DivingDb.Model.Diver", "Diver")
                        .WithMany()
                        .HasForeignKey("DiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingDb.Model.DivingEquipment", "DivingEquipment")
                        .WithMany("AssignedTo")
                        .HasForeignKey("DivingEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DivingDb.Model.DivingLabor", b =>
                {
                    b.HasOne("DivingDb.Model.DiveTypePermission", "DiveTypePermission")
                        .WithMany()
                        .HasForeignKey("DiveTypePermissionId");

                    b.HasOne("DivingDb.Model.DivingLaborStatus", "DivingLaborStatus")
                        .WithMany()
                        .HasForeignKey("DivingLaborStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DivingDb.Model.DivingTypeSubJob", b =>
                {
                    b.HasOne("DivingDb.Model.DivingTypeJob", "DivingTypeJob")
                        .WithMany("SubJobs")
                        .HasForeignKey("DivingTypeJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
